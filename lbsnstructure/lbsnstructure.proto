syntax = "proto3";

// global package namespace
package lbsn.structure;

// import structure dependencies
import "google/protobuf/timestamp.proto";

/*
 * Describes the Common Data Structure LBSN Concept
 */

 message Origin {
  /*
   * A unique identifier of the object.
   */
  enum OriginID {
        UNKNOWN = 0;
        INSTAGRAM = 1;
        FLICKR = 2;
        TWITTER = 3;
        FACEBOOK = 4;
        FOURSQUARE = 5;
   }
  OriginID origin_id = 1;
  /*
   * Optional Attributes
   */
   string name = 2;
}

message CompositeKey {
  /*
   * Except for language, a Composite Key is used for all messages and
   * is constructed from the internal id (origin, 1= Instagram, 2= Flickr, 3= Twitter etc.)
   * and the services own, hashed or encrypted (gu)id
   */
    Origin origin = 1;
    string id = 2;  
}

message RelationshipKey {
  /*
   *  Many-to-many relationships that 
    could otherwise not be implemented in the relational lbsn structure. Relationships can 
    also link entities between two different origin_id's (e.g. different services).
   */
    CompositeKey relation_to = 1;
    CompositeKey relation_from = 2;  
}

message Post {
  /*
   * Primary Key. A unique identifier of the object across networks.
   */
  CompositeKey pkey = 1;   
  /*
   * Optional Attributes
   */
   
   /*
   * Only if lat/lng coordinates are available, otherwise substitude this location information from place, city or country table
   * and modify post_geoaccuracy to "place", "city", or "country". Formatting: WKT (Well-Known-Text String)
   */
   string post_latlng = 2;
   CompositeKey place_pkey = 3;
   CompositeKey city_pkey = 4;
   CompositeKey country_pkey = 5;
   CompositeKey user_pkey = 6;
   google.protobuf.Timestamp post_publish_date = 7;
   string post_body = 8;
   enum PostGeoaccuracy {
        UNKNOWN = 0;
        LATLNG = 1;
        PLACE = 2;
        CITY = 3;
        COUNTRY = 4;
    }
    PostGeoaccuracy post_geoaccuracy = 9;  
    repeated CompositeKey user_mentions_pkey = 10;    
    repeated string hashtags = 11;
    repeated string emoji = 12;
    int64 post_like_count  = 13;
    int64 post_comment_count  = 14;
    int64 post_views_count  = 15;
    string post_title = 16;
    google.protobuf.Timestamp post_create_date = 17;
    string post_thumbnail_url = 18;
    string post_url = 19;
    enum PostType { //choose the more specific type (VIDEO over TEXT even if text is present)
        TEXT = 0;
        IMAGE = 1;
        VIDEO = 2;
        OTHER = 3;
    }
    PostType post_type = 20;
    string post_filter = 21; //Any automatic filters applied to post? (e.g. Photo Filters such as Amarao; Automatic Translations of Text)
    int64 post_quote_count = 22; //Number of times this Post has been quoted by other users, e.g. count of Quote-Tweets in Twitter.
    int64 post_share_count = 23; //Number of times this Post has been shared by other users, e.g. count of Retweets in Twitter.
    string input_source = 24; //Type of input device used by the user to post, for a list see Twitter, e.g. "Web", "IPhone", "Android" etc., recommendation: should be oriented at Twitter source types.
    Language post_language = 25; //A BCP 47 language identifier corresponding to the (machine-detected language) of the Post body-text, empty/whitespace if no language could be detected, NULL if not specified.
    int32 post_content_license = 26; //An integer for specifying licenses attached to post (e.g. All Rights Reserved = 0). Numbers shamelessly ripped from Flickr: https://www.flickr.com/services/api/flickr.photos.licenses.getInfo.html
}

message User {
  /*
   * Primary Key. A unique identifier of the object.
   */
  CompositeKey pkey = 1;
  /*
   * Optional Attributes
   */
   string user_name = 2;
   string user_fullname = 3;
   int64 follows = 4;
   int64 followed = 5;
   int64 group_count = 6; //The number of public groups or communities this user is part of
   string biography = 7;
   int64 post_count = 8;
   string url = 9;
   bool is_private = 10;
   bool is_available = 11;
   Language user_language = 12;   
   string user_location = 13; //The user-defined location for this profile. Not necessarily a location, nor machine-parseable.  
   string user_location_geom = 14; //(WKT: Point) Coordinates (lat/lng) of the user-location, either provided by user or geocoded from user_location_name.
   int64 liked_count = 15; //The number of Posts this user has liked in total.
   google.protobuf.Timestamp active_since = 16; //UTC datetime when the user was first active (e.g. time of account creation, or derived from first post_publish_date)
   string profile_image_url = 17; //URL pointing to the profile image of the user.
   string user_timezone = 18;
   sint32 user_utc_offset = 19;
   repeated string user_groups_member = 20; //The list of groups this user has joined/ is a member of (active participation interest).
   repeated string user_groups_follows = 21; //The list of groups this user follows (viewing interest).

}

message UserGroup {
  /*
   * Primary Key. A unique identifier of the object.
   */
  CompositeKey pkey = 1;
  /*
   * Optional Attributes
   */
   string usergroup_name = 2;
   string usergroup_description = 3;
   int64 member_count = 4;
   google.protobuf.Timestamp usergroup_createdate = 5;
   CompositeKey user_owner_pkey = 6;
}

message Place {
  /*
   * Primary Key. A unique identifier of the object.
   */
  CompositeKey pkey = 1;
  /*
   * Optional Attributes
   */
    string name = 2; //Name in English
    repeated string name_alternatives = 3; //Alternative names (e.g. in other languages; synonyms).
    int64 post_count = 4;
    string url = 5; //A link to reach the place on respective LBSN
    string geom_center = 6; //WKT Point
    string geom_area = 7; //WKT Polygon
    CompositeKey city_pkey = 8;
    string place_description = 9;
    string place_website = 10; //A link provided by users for this place (e.g. webpage for restaurant, park-management etc.)
    string place_phone = 11; //Telephone number publicly provided for some places on LBSN.
    string address = 12; //Address publicly provided for some places on LBSN.
    string zip_code = 13; //Zip_code publicly provided for some places on LBSN.
    int64 checkin_count = 14;
    int64 like_count = 15;
    repeated string parent_places = 16; //Places can be hierarchically structured, list any up-hierarchy places parent to this one as guids here
}

message City {
  /*
   * Primary Key. A unique identifier of the object.
   */
  CompositeKey pkey = 1;
  /*
   * Optional Attributes
   */
    string name = 2; //Name in English
    repeated string name_alternatives = 3; //Alternative names (e.g. in other languages; synonyms).
    string sub_type = 4; //Subtype for lbsnCity (e.g. "Neighborhood", "Admin", etc.)
    string url = 5;   
    string geom_center = 6; //WKT Point
    string geom_area = 7; //WKT Polygon
    CompositeKey country_pkey = 8;
}

message Country {
  /*
   * Primary Key. A unique identifier of the object.
   */
  CompositeKey pkey = 1;
  /*
   * Optional Attributes
   */
    string name = 2;
    repeated string name_alternatives = 3;
    string url = 4;   
    string geom_center = 5; //WKT Point
    string geom_area = 6; //WKT Polygon   
}

message PostReaction {
  /*
   * Primary Key. A unique identifier of the object.
   */
  CompositeKey pkey = 1;   
  /*
   * Optional Attributes
   */
   CompositeKey user_pkey = 2;
   CompositeKey referencedPost_pkey = 3; // a reference to post to which this reaction refers to  (e.g. doe a reaction of type REPLY, reference original post_pkey here)
   CompositeKey referencedPostreaction_pkey = 4; // a reference to another reaction (e.g. if this reaction is a "like" of another reaction, reference original postreaction_pkey here)
   string reaction_latlng = 5; //WKT Point
   enum ReactionType { //choose the more specific type if multiple apply. Merge similar types: Retweet -> Share; Reply -> Comment; Star -> Like
       UNKNOWN = 0;
       SHARE = 1;
       COMMENT = 2;
       QUOTE = 3;
       LIKE = 4;
       EMOJI = 5;
       OTHER = 6;
   }
   ReactionType reaction_type = 6;  
   google.protobuf.Timestamp reaction_date = 7;   
   string reaction_content = 8;
   int64 reaction_like_count = 9;
   repeated CompositeKey user_mentions_pkey = 10;   
}

message Relationship {
  /*
   * Primary Key. A unique identifier of the object.
   */
  RelationshipKey pkey = 1;  
  /*
   * Optional Attributes
   */
   enum RelationshipType {
       UNKNOWN = 0;
       isFRIEND = 1; //A friend of a user (i.e. this user y is the friend of user x). Being a friend is a mutual relationship.
       isCONNECTED = 2; //A user that is connected to someone, e.g. a follower of user x (i.e. this user y is the follower of user x). Being connected to someone (e.g. being a follower) is not a mutual relationship.
       isEQUAL = 3; //A user that has multiple representations on the same service or is linked across services.
       inGROUP = 4;
       followsGROUP = 5;
       inCOMMUNITY = 6;
       MENTIONS_USER = 7;
       hasHASHTAG = 8;
       hasEMOJI = 9;
       OTHER = 10;
   }
   RelationshipType relationship_type = 2;    
}

message Language {
  /*
   * Primary Key. A unique identifier of the object.
   * A BCP 47 language identifier corresponding to the (machine-detected language) of the Post body-text, empty/whitespace if no language could be detected, NULL if not specified.
   */
  string language_short = 1;
  /*
   * Optional Attributes
   */
   string name = 2;
   string language_name_de = 3;
}
